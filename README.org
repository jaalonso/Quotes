#+TITLE: Quotes on Mathematics and Computer Science

** [[https://en.wikipedia.org/wiki/Alan_Perlis][Alan J. Perlis]]

+ A language that doesn't affect the way you think about programming is not
  worth knowing.
  + Un lenguaje que no afecta a la forma de pensar en la programación no vale la
    pena conocerlo.

** [[https://en.wikipedia.org/wiki/Alan_Turing][Alan Turing]]

+ Codes are a puzzle. A game, just like any other game.
  + Los programas son rompecabezas. Un juego, como cualquier otro juego.

+ In order that the man who checks may not have too difficult a task, the
  programmer should make a number of definite assertions which can be checked
  individually, and from which the correctness of the whole program easily
  follows.
  + Para que el hombre que hace la comprobación no tenga una tarea demasiado
    difícil, el programador debe hacer una serie de afirmaciones definidas que
    puedan ser comprobadas individualmente, y de las que se desprenda fácilmente
    la corrección de todo el programa.

** [[https://en.wikipedia.org/wiki/Donald_Knuth][Donald Knuth]]

+ Computer programming is an art, because it applies accumulated knowledge to
  the world, because it requires skill and ingenuity, and especially because it
  produces objects of beauty. A programmer who subconsciously views himself as
  an artist will enjoy what he does and will do it better.
  + La programación de computadoras es un arte, porque aplica el conocimiento
    acumulado al mundo, porque requiere habilidad e ingenio, y especialmente
    porque produce objetos de belleza. Un programador que subconscientemente se ve
    a sí mismo como un artista disfrutará lo que hace y lo hará mejor.

+ Let us change our traditional attitude to the construction of programs:
  Instead of imagining that our main task is to instruct a computer what to do,
  let us concentrate rather on explaining to human beings what we want a
  computer to do.
  + Cambiemos nuestra actitud tradicional ante la construcción de programas: En
    lugar de imaginar que nuestra principal tarea es instruir a un ordenador
    sobre lo que debe hacer, concentrémonos más bien en explicar a los seres
    humanos lo que queremos que haga un ordenador.

+ Programming is the art of telling another human being what one wants the
  computer to do.
  + La programación es el arte de decirle a otro ser humano lo que uno quiere
    que haga el ordenador.

** [[https://en.wikipedia.org/wiki/Edsger_W._Dijkstra][Edsger W. Dijkstra]]

+ Computer Science is no more about computers than astronomy is about
  telescopes.
  + La informática no tiene más que ver con los ordenadores que la astronomía
    con los telescopios.

+ Progress is possible only if we train ourselves to think about programs
  without thinking of them as pieces of executable code.
  + El progreso solo es posible si nos entrenamos para pensar en programas sin
    pensar en ellos como piezas de código ejecutable

** [[https://en.wikipedia.org/wiki/Georg_Gottlob][Georg Gottlob]]

+ Computer Science is the continuation of Logic by other means.
  + La ciencia de la computación es la continuación de la lógica por otros
    medios.

** [[https://en.wikipedia.org/wiki/Gottlob_Frege][Gottlob Frege]]

+ Every good mathematician is at least half a philosopher, and every good
  philosopher is at least half a mathematician.
  + Todo buen matemático es al menos medio filósofo, y todo buen filósofo es al
    menos medio matemático.

** [[https://es.wikipedia.org/wiki/Grace_Murray_Hopper][Grace Hopper]]

+ The most dangerous phrase of the language is "It has always been done this way".
  + La frase más dañina del lenguaje es: "Siempre se ha hecho así".

** [[https://en.wikipedia.org/wiki/Hal_Abelson][Harold Abelson]]

+ Programs must be written for people to read, and only incidentally for
  machines to execute.
  + Los programas deben estar escritos para que la gente los lea y, sólo de
    manera incidental, para que las máquinas los ejecuten.

** [[https://en.wikipedia.org/wiki/Kurt_G%C3%B6del][Kurt Gödel]]

+ The development of mathematics towards greater precision has led, as is well
  known, to the formalization of large tracts of it, so that one can prove any
  theorem using nothing but a few mechanical rules.
  + El desarrollo de las matemáticas hacia una mayor precisión ha llevado, como
    es bien sabido, a la formalización de grandes partes de las mismas, de modo
    que se puede probar cualquier teorema usando nada más que unas pocas reglas
    mecánicas.

** [[https://en.wikipedia.org/wiki/Martin_Fowler_(software_engineer)][Martin Fowler]]

+ Any fool can write code that a computer can understand. Good programmers
  write code that humans can understand.
  + Cualquier tonto puede escribir un código que un ordenador puede
    entender. Los buenos programadores escriben código que los humanos pueden
    entender.

** [[https://bit.ly/2JntZz3][Marvin Minsky]]

+ Computer languages of the future will be more concerned with goals and less
  with procedures specified by the programmer.
  + Los lenguajes informáticos del futuro estarán más preocupados por los
    objetivos y menos por los procedimientos especificados por el programador.

** [[https://es.wikipedia.org/wiki/Richard_Courant][Richard Courant]] y [[https://en.wikipedia.org/wiki/Herbert_Robbins][Herbert Robbins]]

+ Mathematics as an expression of the human mind reflects the active will, the
  contemplative reason, and the desire for aesthetic perfection. Its basic
  elements are logic and intuition, analysis and construction, generality and
  individuality.
  + Las matemáticas como expresión de la mente humana reflejan la voluntad
    activa, la razón contemplativa y el deseo de perfección estética. Sus
    elementos básicos son la lógica y la intuición, el análisis y la
    construcción, la generalidad y la individualidad.

** [[https://en.wikipedia.org/wiki/Robert_Kowalski][Robert Kowalski]]

+ Predicate logic is a useful and practical, high-level, non-deterministic
  programming language with sound theoretical foundations.
  + La lógica de predicados es un lenguaje de programación no determinista de
    alto nivel, útil y práctico, con una sólida base teórica.

** [[https://en.wikipedia.org/wiki/Tony_Hoare][Tony Hoare]]
+ There are two ways of constructing a software design: One way is to make it so
  simple that there are obviously no deficiencies and the other way is to make
  it so complicated that there are no obvious deficiencies.
  + Hay dos maneras de diseñar un software. Una forma es hacerlo tan simple que
    obviamente no haya deficiencias. Y la otra forma es hacerlo tan complicado que
    no haya deficiencias obvias.
